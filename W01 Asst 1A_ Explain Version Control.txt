Version control is a method to track code that was updated, either by yourself as the programmer, or another programmer, tester, or supervisor. In early days, code was usually tracked by programmers annotating inside the code file, via comments, or in a tandem file. These were meant to allow all programmers an equal access to what changed or was added or updated to the code, especially when many hands were in the pan trying to cook. It wasn't a foolproof method either, as many times programmers chose not to, or forgot, to update. 
Benefits of version control are that we should have a better idea of who worked on what and when. In our small code projects, where we are the main programmer, the external processes that track our changes to code, and ask us to input descriptions before we send it to the repository, it might seem like the work of tracking code is greater than the work of writing the code. However, when even one other programmer is involved, or we as programmers have a period where we aren't directly interacting with the code, we can have times where we don't remember if we did this or that fix. 
With version control, like that which is used by VSCode and other similar editing platforms, version control could be set up because the programmer wants to know what is happening to "her" code, and set up the repositiory to require all persons to do a check-out system. It would make sure that each of the programmers changes were logged, and hopefully did not overwrite each other. The programmers, as well as supervisors, and even testers, would be tracked with respect to code changes. In the team, this allows the programmer to be quicker in writing, as he or she knows what parts have been done and which need attention, the supervisor can track the work of his or her programmers, as well as tracking and/or verifying code works are progressing on time, slower or quicker than expected. It can help the testing area come up with independent tests for the materials that were changed, as well as verify nothing was broken in the already processed tests. 
Heres's an important one, and that is ensuring that git is picking up all of the current included files and directories. "git add ." It represents to git to include all items in the current directory as well as everything beneath it. However, most of the work will be done by the VSCode system if we have everything set up as directed. We just need to ensure we add the files, including things like the images and logos we reference in our code. Then commit updates our local logs, and sync or push sends the files to our repository directory structure. It is easy to miss putting in a comment, or deciding what is important for our local changes. We should try to make comments useful, even when we are in that cycle of finding and fixing errors. 